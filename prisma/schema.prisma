generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id String @id

    stores Store[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Store {
    id String @id @default(cuid())

    name       String
    users      User[]
    banners    Banner[]   @relation("StoreToBanner")
    categories Category[] @relation("StoreToCategory")
    products   Product[]  @relation("StoreToProduct")
    orders     Order[]    @relation("StoreToOrder")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id      String @id @default(cuid())
    storeId String
    store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

    name     String
    bannerId String?
    banner   Banner?   @relation("BannerToCategory", fields: [bannerId], references: [id])
    products Product[] @relation("CategoryToProduct")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([bannerId])
    @@index([storeId])
}

model Product {
    id      String @id @default(cuid())
    storeId String
    store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

    name       String
    categoryId String
    category   Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
    options    ProductOption[]
    variants   ProductVariant[] @relation("ProductToVariants")
    price      Decimal
    images     ProductImage[]   @relation("ProductToImage")
    orderItems OrderItem[]

    isFeatured Boolean @default(false)
    isArchived Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
    @@index([categoryId])
}

model ProductOption {
    // id String @id @default(cuid())

    name  String @id
    value String
    type  String

    // colors Color[] @relation("OptionsToColors")
    // sizes  Size[]  @relation("OptionsToSizes")

    product Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariant {
    id String @id @default(cuid())

    productId String
    product   Product        @relation("ProductToVariants", fields: [productId], references: [id])
    // colorId   String?
    // color     Color?         @relation("VariantToColor", fields: [colorId], references: [id])
    // sizeId    String?
    // size      Size?          @relation("VariantToSize", fields: [sizeId], references: [id])
    price     Decimal?
    images    ProductImage[] @relation("VariantToImage")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // @@index([colorId])
    // @@index([sizeId])

    @@index([productId])
}

model ProductImage {
    id String @id @default(cuid())

    key  String
    size Int
    name String
    url  String

    fileKey  String?
    fileSize Int?
    fileName String?
    fileUrl  String?

    productId String?
    product   Product?        @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
    variantId String?
    variant   ProductVariant? @relation("VariantToImage", fields: [variantId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([variantId])
}

model Banner {
    id      String @id @default(cuid())
    storeId String
    store   Store  @relation("StoreToBanner", fields: [storeId], references: [id])

    label      String
    categories Category[] @relation("BannerToCategory")

    key  String
    size Int
    name String
    url  String

    fileKey  String?
    fileSize Int?
    fileName String?
    fileUrl  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Order {
    id      String @id @default(cuid())
    storeId String
    store   Store  @relation("StoreToOrder", fields: [storeId], references: [id])

    items     OrderItem[]
    status    OrderStatus @default(pending)
    address   String
    phone     String?
    email     String?
    paymentId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

enum OrderStatus {
    pending
    cancelled
    paid
    refunded
}

model OrderItem {
    id String @id @default(cuid())

    orderId   String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id])
    quantity  Int     @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderId])
    @@index([productId])
}

// model Color {
//     id       String           @id @default(cuid())
//     variants ProductVariant[] @relation("VariantToColor")
//
//     name      String
//     value     String
//     options   ProductOptions? @relation("OptionsToColors", fields: [optionsId], references: [id])
//     optionsId String?
//
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//
//     @@index([optionsId])
// }

// model Size {
//     id       String           @id @default(cuid())
//     variants ProductVariant[] @relation("VariantToSize")
//
//     name      String
//     value     String
//     options   ProductOptions? @relation("OptionsToSizes", fields: [optionsId], references: [id])
//     optionsId String?
//
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//
//     @@index([optionsId])
// }
