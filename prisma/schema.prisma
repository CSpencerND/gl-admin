generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Store {
    id         String     @id @default(cuid())
    name       String
    userId     String
    banners    Banner[]   @relation("StoreToBanner")
    categories Category[] @relation("StoreToCategory")
    sizes      Size[]     @relation("StoreToSize")
    colors     Color[]    @relation("StoreToColor")
    products   Product[]  @relation("StoreToProduct")
    orders     Order[]    @relation("StoreToOrder")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       String    @id @default(cuid())
    storeId  String
    store    Store     @relation("StoreToCategory", fields: [storeId], references: [id])
    bannerId String
    banner   Banner    @relation("BannerToCategory", fields: [bannerId], references: [id])
    products Product[] @relation("CategoryToProduct")
    name     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([bannerId])
    @@index([storeId])
}

model Size {
    id       String    @id @default(cuid())
    storeId  String
    store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
    products Product[]
    name     String
    value    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Color {
    id       String    @id @default(cuid())
    storeId  String
    store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
    products Product[]
    name     String
    value    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Banner {
    id         String     @id @default(cuid())
    storeId    String
    store      Store      @relation("StoreToBanner", fields: [storeId], references: [id])
    label      String
    categories Category[] @relation("BannerToCategory")

    key      String
    size     Int
    name     String
    url      String
    fileKey  String?
    fileSize Int?
    fileName String?
    fileUrl  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

model Product {
    id         String         @id @default(cuid())
    storeId    String
    store      Store          @relation("StoreToProduct", fields: [storeId], references: [id])
    categoryId String
    category   Category       @relation("CategoryToProduct", fields: [categoryId], references: [id])
    sizeId     String
    size       Size           @relation(fields: [sizeId], references: [id])
    colorId    String
    color      Color          @relation(fields: [colorId], references: [id])
    name       String
    price      Decimal
    images     ProductImage[]
    orderItems OrderItem[]

    isFeatured Boolean @default(false)
    isArchived Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
    @@index([categoryId])
    @@index([sizeId])
    @@index([colorId])
}

model ProductImage {
    id       String  @id @default(cuid())
    key      String
    size     Int
    name     String
    url      String
    fileKey  String?
    fileSize Int?
    fileName String?
    fileUrl  String?

    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Order {
    id         String      @id @default(cuid())
    storeId    String
    store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
    orderItems OrderItem[]
    status     OrderStatus @default(pending)
    phone      String      @default("")
    address    String      @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId])
}

enum OrderStatus {
    pending
    cancelled
    paid
    refunded
}

model OrderItem {
    id        String  @id @default(cuid())
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId String
    product   Product @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderId])
    @@index([productId])
}
